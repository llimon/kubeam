sudo: required

language: go

services:
  - docker

# This moves Kubernetes specific config files.
env:
- CHANGE_MINIKUBE_NONE_USER=true

before_script:
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0
# Fix the kubectl context, as it's often stale.
- minikube update-context
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done

script:
- bash build.sh kubeam
- curl -L -o kubectl.linux https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl
- docker build . -f Dockerfile-kubeam.dkr -t localhost:5000/kubeam:latest
- kubectl cluster-info 
# Bootstrap kubeam
- kubectl --namespace kube-system get pods  
- kubectl config set-context  minikube --namespace default
- kubectl apply -f ci-tests/minikube-resitry.yaml
- sleep 20
- kubectl get pods  
- bash build.sh sample-webapp
- docker build . -f Dockerfile-sample-webapp -t localhost:5000/sample-webapp:001
- rm -r -f ./target
- sed -i s/requested/redeployed/g src/sample-webapp/main.go
- bash build.sh sample-webapp
- docker build . -f Dockerfile-sample-webapp -t localhost:5000/sample-webapp:002
- docker push localhost:5000/kubeam
- kubectl apply -f ci-tests/kubeam-bootstrap.yaml
- kubectl apply -f ci-tests/kubeam-bootstrap-service.yaml
- kubectl get pods 
